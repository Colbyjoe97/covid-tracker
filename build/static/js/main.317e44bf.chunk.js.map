{"version":3,"sources":["components/InfoBox.js","util.js","components/Map.js","components/Table.js","components/LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","isRed","isOrange","isGrey","active","cases","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","ChangeView","useMap","setView","scrollWheelZoom","TileLayer","url","attribution","Table","todayCases","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","isGreen","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.317e44bf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\n\r\nfunction InfoBox({ title, isRed, isGrey, isOrange, active, cases, total, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      } ${isOrange && \"infoBox--orange\"}`}\r\n    >\r\n      <CardContent>\r\n        {/* Title */}\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n\r\n        {/* Number of Cases */}\r\n        <h2\r\n          className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"} ${\r\n            isOrange && \"infoBox__cases--orange\"\r\n          }`}\r\n        >\r\n          {cases}\r\n        </h2>\r\n\r\n        {/* Total Cases */}\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport { Circle, Popup } from 'react-leaflet'\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        // rgb: \"rgb(204, 16, 52)\",\r\n        // half_op: \"rgba(204, 16, 52, 0.5)\",\r\n        multiplier: 300,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        // rgb: \"rgb(125, 215, 29)\",\r\n        // half_op: \"rgba(125, 215, 29, 0.5)\",\r\n        multiplier: 400,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        // rgb: \"rgb(251, 68, 67)\",\r\n        // half_op: \"rgba(251, 68,67, 0.5)\",\r\n        multiplier: 600\r\n    }\r\n}\r\n\r\n// Sorts data by number of cases\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\r\n}\r\n\r\nexport const prettyPrintStat = (stat) => \r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\"\r\n\r\n// Draw circles on map with interactive tooltips\r\nexport const showDataOnMap = (data, casesType='cases') => (\r\n    data.map(country => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            pathOptions={{\r\n                color: casesTypeColors[casesType].hex,\r\n                fillColor: casesTypeColors[casesType].hex,\r\n              }}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})`}} />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Total Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n)","import React from 'react'\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from '../util'\r\nimport { MapContainer as LeafletMap, TileLayer, useMap } from \"react-leaflet\";\r\n// npm i react-leaflet leaflet\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    function ChangeView({ center, zoom }) { // Updates map coords\r\n        const map = useMap();\r\n        map.setView(center, zoom);\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap\r\n             casesType={casesType}\r\n             center={center}\r\n             zoom={zoom}\r\n             scrollWheelZoom={false}\r\n            >\r\n                <ChangeView center={center} zoom={zoom} />\r\n                <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'>\r\n                </TileLayer>\r\n\r\n                {/* Loop through countries to draw circles on hotspot covid areas */}\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map","import React from 'react'\r\nimport numeral from 'numeral'\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                countries.map(({country, cases, todayCases}) => (\r\n                    // type tr>td*2 to get 1 tr with 2 td's\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                        <td>\r\n                            <strong>{numeral(cases).format()}</strong>\r\n                        </td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","import React, { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from 'numeral'; // npm i numeral\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: { // Hover over graph to see data at that point\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function(value, index, values) {\r\n                        return numeral(value).format(\"0a\")\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for(let date in data.cases) {\r\n        if(lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint)\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData\r\n}\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n    const [data, setData] = useState({})\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType)\r\n                    setData(chartData)\r\n                    // console.log(chartData)\r\n                })\r\n            }\r\n            fetchData()\r\n        }, [casesType])\r\n\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && casesType === \"recovered\" && ( // Checks if data exists before trying to render info\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [{\r\n                            backgroundColor: \"rgb(125, 215, 29, 0.5)\",\r\n                            borderColor: \"green\",\r\n                            data: data\r\n                        }]\r\n                }} />\r\n            )}\r\n            {data?.length > 0 && casesType === \"cases\" && ( // Checks if data exists before trying to render info\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [{\r\n                            backgroundColor: \"rgba(204, 16, 52, 0.5\",\r\n                            borderColor: \"#CC1034\",\r\n                            data: data\r\n                        }]\r\n                }} />\r\n            )}\r\n            {data?.length > 0 && casesType === \"deaths\" && ( // Checks if data exists before trying to render info\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [{\r\n                            backgroundColor: \"rgba(251, 68,67, 0.5)\",\r\n                            borderColor: \"#fb4443\",\r\n                            data: data\r\n                        }]\r\n                }} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph","import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core'\n// material-ui.com (npm install @material-ui/core)\nimport InfoBox from './components/InfoBox'\nimport Map from './components/Map'\nimport \"leaflet/dist/leaflet.css\";\nimport Table from './components/Table'\nimport './Table.css'\nimport { sortData,  prettyPrintStat } from './util'\nimport LineGraph from './components/LineGraph'\n\n// https://disease.sh/v3/covid-19/countries\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState([ 34.80746, -40.4796 ]);\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data)\n      })\n  }, [])\n\n  // Get Country Info\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country, // United States, United Kingdom, etc..\n              value: country.countryInfo.iso2 // UK, USA, FR, etc..\n            }\n            ));\n            const sortedData = sortData(data)\n            setTableData(sortedData)\n            setMapCountries(data)\n            setCountries(countries)\n        })\n    };\n    getCountriesData();\n  }, []);\n\n  // Saves dropdown selection\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value\n    setCountry(countryCode)\n\n    // Get's info for the country or countries depending on dropdown selection\n    const url = countryCode === 'worldwide'\n    ? 'https://disease.sh/v3/covid-19/all'\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode)\n        setCountryInfo(data)\n        {\n          countryCode === \"worldwide\" ?\n          setMapCenter([ 34.80746, -40.4796 ]) :\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n        }\n        {countryCode === \"worldwide\" ? setMapZoom(3) : setMapZoom(4)}\n      })\n    }\n  console.log(\"TODAYS CASES\", countryInfo.todayCases)\n  console.log(\"TOTAL CASES\", countryInfo.cases)\n  console.log(\"COUNTRY INFO: \", countryInfo)\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {/* Loop through all countries */}\n              {\n                countries.map((country => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                )))\n              }\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            total={prettyPrintStat(countryInfo.cases)}\n            cases={countryInfo.todayCases !== 0 ?  prettyPrintStat(countryInfo.todayCases) : prettyPrintStat(0)}\n          />\n          <InfoBox\n            isGreen\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            total={prettyPrintStat(countryInfo.recovered)}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n          />\n          <InfoBox\n            isOrange\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            total={prettyPrintStat(countryInfo.deaths)}\n            // total={countryInfo.deaths === 0? prettyPrintStat(countryInfo.deaths) : 1 }\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n          />\n        </div>\n\n        {/* Map */}\n        <Map\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n          casesType={casesType}\n        />\n      </div>\n\n      {/* TABLE */}\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by Country</h3>\n          <Table countries={tableData} />\n\n          {/* Graph */}\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}