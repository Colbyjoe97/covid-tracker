[{"C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\index.js":"1","C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\App.js":"2","C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\reportWebVitals.js":"3","C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\components\\InfoBox.js":"4","C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\components\\Table.js":"5","C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\util.js":"6","C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\components\\LineGraph.js":"7","C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\components\\Map.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":4796,"mtime":1611886372073,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":1008,"mtime":1611886374816,"results":"13","hashOfConfig":"10"},{"size":584,"mtime":1611886376194,"results":"14","hashOfConfig":"10"},{"size":2151,"mtime":1611881915879,"results":"15","hashOfConfig":"10"},{"size":3791,"mtime":1611886376960,"results":"16","hashOfConfig":"10"},{"size":1157,"mtime":1611886374246,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1g6awo8",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\index.js",[],["36","37"],"C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\App.js",["38","39"],"import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core'\n// material-ui.com (npm install @material-ui/core)\nimport InfoBox from './components/InfoBox'\nimport Map from './components/Map'\nimport \"leaflet/dist/leaflet.css\";\nimport Table from './components/Table'\nimport './Table.css'\nimport { sortData,  prettyPrintStat } from './util'\nimport LineGraph from './components/LineGraph'\n\n// https://disease.sh/v3/covid-19/countries\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState([ 34.80746, -40.4796 ]);\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapCountries, setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data)\n      })\n  }, [])\n\n  // Get Country Info\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country, // United States, United Kingdom, etc..\n              value: country.countryInfo.iso2 // UK, USA, FR, etc..\n            }\n            ));\n            const sortedData = sortData(data)\n            setTableData(sortedData)\n            setMapCountries(data)\n            setCountries(countries)\n        })\n    };\n    getCountriesData();\n  }, []);\n\n  // Saves dropdown selection\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value\n    setCountry(countryCode)\n\n    // Get's info for the country or countries depending on dropdown selection\n    const url = countryCode === 'worldwide'\n    ? 'https://disease.sh/v3/covid-19/all'\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode)\n        setCountryInfo(data)\n        {\n          countryCode === \"worldwide\" ? \n          setMapCenter([ 34.80746, -40.4796 ]) :\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n        }\n        {countryCode === \"worldwide\" ? setMapZoom(2) : setMapZoom(4)}\n      })\n  }\n  console.log(\"COUNTRY INFO: \", countryInfo)\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {/* Loop through all countries */}\n              {\n                countries.map((country => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                )))\n              }\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n          isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            total={prettyPrintStat(countryInfo.cases)}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n          />\n          <InfoBox\n            isGreen\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            total={prettyPrintStat(countryInfo.recovered)}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            total={prettyPrintStat(countryInfo.deaths)}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n          />\n        </div>\n\n        {/* Map */}\n        <Map\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n          casesType={casesType}\n        />\n      </div>\n\n      {/* TABLE */}\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by Country</h3>\n          <Table countries={tableData} />\n\n          {/* Graph */}\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;","C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\reportWebVitals.js",[],"C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\components\\InfoBox.js",[],"C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\components\\Table.js",[],"C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\util.js",[],"C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\components\\LineGraph.js",[],"C:\\Projects\\covid-tracker\\covid-19-tracker\\src\\components\\Map.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":69,"column":9,"nodeType":"46","messageId":"47","endLine":73,"endColumn":10},{"ruleId":"44","severity":1,"message":"45","line":74,"column":9,"nodeType":"46","messageId":"47","endLine":74,"endColumn":70},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]